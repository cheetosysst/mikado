import { type NextPage } from "next";
import Head from "next/head";
import React, { Ref, useEffect, useRef, useState } from "react";
import Layout from "~/components/layouts/main.layout";
import Image from "next/image";
import { Heart, LoaderIcon, MessageSquare, Repeat } from "lucide-react";
import { api } from "~/utils/api";
import { clerkClient, useUser } from "@clerk/nextjs";
import type { TweetData } from "~/server/api/routers/tweet";
import Link from "next/link";
import { useIntersection } from "@mantine/hooks";

const Home: NextPage = () => {
	const { data, fetchNextPage, isFetchingNextPage } =
		api.tweet.getTweetsInfinite.useInfiniteQuery(
			{ limit: 5 },
			{
				getNextPageParam: (lastpage) => {
					const lastItem = lastpage[lastpage.length - 1];
					return lastItem?.time.toISOString() || undefined;
				},
				initialCursor: new Date().toISOString(),
			}
		);
	const tweetList: TweetData[] | undefined = data?.pages.flatMap(
		(item) => item
	);

	const lastPosRef = useRef<HTMLElement>(null);
	const { ref, entry } = useIntersection({
		root: lastPosRef.current,
		threshold: 1,
	});

	useEffect(() => {
		if (entry?.isIntersecting) {
			Promise.all([fetchNextPage()]).catch((err) => console.error(err));
			return;
		}
	}, [entry, fetchNextPage]);

	return (
		<>
			<Head>
				<title>mikado</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Layout>
				<Composer />
				<hr className="border-white/10" />
				<div className="flex max-h-full flex-col overflow-x-hidden overflow-y-scroll">
					{tweetList &&
						tweetList?.map((item, index) => (
							<TweetItem
								data={item}
								key={`post-${item.id}-${index}`}
							/>
						))}
					<div
						className="min-h-10 mb-10 flex h-10 w-full justify-center"
						ref={ref}
					>
						{isFetchingNextPage ? (
							<LoaderIcon className="animate-spin-slow" />
						) : undefined}
					</div>
				</div>
			</Layout>
		</>
	);
};

const TweetItem = ({ data, ...props }: { data: TweetData }) => {
	const likeMutation = api.tweet.toggleLike.useMutation();
	const { user } = useUser();
	const likeQuery = api.tweet.likeState.useQuery({
		user: user?.id || "",
		tweet: data.id,
	});
	const author = api.user.getUser.useQuery({ id: data.user }).data;

	// TODO change to reducer
	const [liked, setLiked] = useState(likeQuery.data && likeQuery.data > 0);
	const [likeCount, setLikeCount] = useState(data._count.likes);

	useEffect(() => {
		setLiked(likeQuery.data && likeQuery.data > 0);
	}, [likeQuery.data]);

	const toggleLike = async () => {
		const result = await likeMutation.mutateAsync({
			user: user?.id || "",
			tweet: data.id,
		});
		setLiked(result);
		setLikeCount(result ? likeCount + 1 : likeCount - 1);
	};

	return (
		<div className="py-4" {...props}>
			<div className="flex gap-2 px-6">
				<div className="shrink-0 ">
					<Image
						src={author?.imageUrl || `/user.jpg`}
						width={42}
						height={42}
						className="rounded-full border-[1px] border-white/30 drop-shadow-sm"
						alt="user avatar"
					/>
				</div>
				<div className="flex grow flex-col">
					<span className="text-semibold my-1 text-xl leading-4 text-white">
						{author?.firstName || author?.lastName || "User"}
						<br />
						<span className="text-sm text-white/50">
							@{author?.username}
						</span>
					</span>
				</div>
			</div>
			<div className="mb-4 mt-2 flex px-8 text-white ">
				{data.content?.content}
			</div>
			<div className="mt-2 flex flex-row justify-between px-8">
				<span className="group flex items-center gap-2 text-white/70 transition-all hover:text-white ">
					<span className="relative h-5 w-5">
						<MessageSquare
							size={20}
							className="absolute transition-all group-hover:scale-110"
						/>
					</span>
					<span className="cursor-default">
						{data._count.children}
					</span>
				</span>
				<span className="group flex items-center gap-2 text-white/70 transition-all hover:text-white ">
					<span className="relative h-5 w-5">
						<Repeat
							size={20}
							className="relative transition-all group-hover:scale-110"
						/>
					</span>
					<span className="cursor-default">0</span>
				</span>
				{/* eslint-disable-next-line @typescript-eslint/no-misused-promises */}
				<Link href={"#"} onClick={toggleLike}>
					<span className="group relative flex items-center gap-2 text-white/70 transition-all hover:text-white">
						<span className="relative h-5 w-5">
							<Heart
								className={`absolute transition-all focus:text-white/70 group-hover:scale-110 ${
									liked
										? "text-rose-500 group-hover:text-white"
										: "text-white/70 group-hover:text-rose-400"
								}`}
								size={20}
							/>
						</span>
						<span className="cursor-default">{likeCount}</span>
					</span>
				</Link>
			</div>
		</div>
	);
};

const Composer = () => {
	const ref = useRef<HTMLDivElement>(null);
	const { isLoaded, isSignedIn, user } = useUser();
	const tweetMutation = api.tweet.newPost.useMutation();

	const focusHandler = () => {
		setTimeout(() => {
			if (ref.current) ref.current.focus();
		}, 0);
	};

	const submitPost = () => {
		if (!isLoaded || !isSignedIn || ref.current?.innerText === undefined)
			return;

		const content = ref.current.innerText;
		if (!content.length) return;

		tweetMutation.mutate({
			user: user.id,
			content: content,
		});

		ref.current.innerText = "";

		return;
	};

	return (
		<div className="h-min-40 group flex flex-col p-4 transition-all hover:bg-zinc-500/20">
			<div
				contentEditable
				placeholder="New Post"
				className="w-full grow outline-none"
				ref={ref}
			></div>
			<div className="shirnk-0 cursor-text" onClick={focusHandler}>
				<button
					onClick={submitPost}
					className="float-right rounded-lg bg-white/50 p-2 capitalize text-gray-900 transition-all hover:bg-white/80 hover:text-black/60 group-focus-within:bg-white/70 group-focus-within:text-black/60"
				>
					post
				</button>
			</div>
		</div>
	);
};

export default Home;
